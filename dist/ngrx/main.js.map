{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/actions/drivers.actions.ts","webpack:///./src/app/actions/teams.actions.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/drivers.component.ts","webpack:///./src/app/components/teams.component.ts","webpack:///./src/app/effects/drivers.effects.ts","webpack:///./src/app/effects/teams.effects.ts","webpack:///./src/app/pipes/editable-cell.pipe.ts","webpack:///./src/app/reducers/drivers.reducer.ts","webpack:///./src/app/reducers/teams.reducers.ts","webpack:///./src/app/services/drivers.service.ts","webpack:///./src/app/services/teams.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Action } from '@ngrx/store';\nimport { Driver } from '../models/driver.model';\n\nexport const FETCH = '[Drivers] Fetch';\nexport const FETCH_SUCCESS = '[Drivers] Fetch Success';\n\nexport const ADD = '[Drivers] Add';\nexport const ADD_SUCCESS = '[Drivers] Add Success';\n\nexport const EDIT = '[Drivers] Edit';\nexport const EDIT_SUCCESS = '[Drivers] Edit Success';\n\nexport const RESET = '[Drivers] Reset';\n\nexport const DELETE = '[Drivers] Delete';\nexport const DELETE_SUCCESS = '[Drivers] Delete Succes';\nexport const DELETE_FAIL = '[Drivers] Delete Fail';\n\nexport const TOGGLE_EDIT = '[Drivers] Toggle Edit';\n\nexport class Fetch implements Action {\n    readonly type = FETCH;\n}\n\nexport class FetchSuccess implements Action {\n    readonly type = FETCH_SUCCESS;\n    constructor(public drivers) {}\n}\n\nexport class Add implements Action {\n    readonly type = ADD;\n    constructor(public driver: Partial<Driver>) {}\n}\n\nexport class AddSuccess implements Action {\n    readonly type = ADD_SUCCESS;\n    constructor(public driver: Partial<Driver>) {}\n}\n\nexport class Edit implements Action {\n    readonly type = EDIT;\n    constructor(public driver: Partial<Driver>) {}\n}\n\nexport class EditSuccess implements Action {\n    readonly type = EDIT_SUCCESS;\n    constructor(public driver: Partial<Driver>) {}\n}\n\nexport class Delete implements Action {\n    readonly type = DELETE;\n    constructor(public id: number) {}\n}\n\nexport class DeleteSucces implements Action {\n    readonly type = DELETE_SUCCESS;\n    constructor(public id: number) {}\n}\n\nexport class DeleteFail implements Action {\n    readonly type = DELETE_FAIL;\n    constructor(public id: number) {}\n}\n\nexport class ToggleEdit implements Action {\n    readonly type = TOGGLE_EDIT;\n    constructor(public driver: Partial<Driver>) {}\n}\n\nexport class Reset implements Action {\n    readonly type = RESET;\n}\n\nexport type All\n    = Edit\n    | Fetch\n    | Add\n    | ToggleEdit\n    | Delete\n    | DeleteSucces\n    | DeleteFail\n    | Reset;\n","import { Action } from '@ngrx/store';\nimport { Team } from '../models/team.model';\n\nexport const FETCH = '[Tams] Fetch';\nexport const FETCH_SUCCESS = '[Teams] Fetch Success';\n\nexport const ADD = '[Teams] Add';\nexport const ADD_SUCCESS = '[Teams] Add Success';\n\nexport const EDIT = '[Teams] Edit';\nexport const EDIT_SUCCESS = '[Teams] Edit Success';\n\nexport const RESET = '[Teams] Reset';\n\nexport const DELETE = '[Teams] Delete';\nexport const DELETE_SUCCESS = '[Teams] Delete Succes';\nexport const DELETE_FAIL = '[Teams] Delete Fail';\n\nexport const TOGGLE_EDIT = '[Teams] Toggle Edit';\n\nexport const ADD_DRIVER =  '[Teams] Add Driver';\nexport const REMOVE_DRIVER = '[Teams] Remove Driver';\nexport const ADD_DRIVER_SUCCESS =  '[Teams] Add Driver';\nexport const REMOVE_DRIVER_SUCCESS = '[Teams] Remove Driver';\n\nexport class Fetch implements Action {\n    readonly type = FETCH;\n}\n\nexport class FetchSuccess implements Action {\n    readonly type = FETCH_SUCCESS;\n    constructor(public teams) {}\n}\n\nexport class Add implements Action {\n    readonly type = ADD;\n    constructor(public team: Partial<Team>) {}\n}\n\nexport class AddSuccess implements Action {\n    readonly type = ADD_SUCCESS;\n    constructor(public team: Partial<Team>) {}\n}\n\nexport class Edit implements Action {\n    readonly type = EDIT;\n    constructor(public team: Partial<Team>) {}\n}\n\nexport class EditSuccess implements Action {\n    readonly type = EDIT_SUCCESS;\n    constructor(public team: Partial<Team>) {}\n}\n\nexport class Delete implements Action {\n    readonly type = DELETE;\n    constructor(public id: number) {}\n}\n\nexport class DeleteSucces implements Action {\n    readonly type = DELETE_SUCCESS;\n    constructor(public id: number) {}\n}\n\nexport class DeleteFail implements Action {\n    readonly type = DELETE_FAIL;\n    constructor(public id: number) {}\n}\n\nexport class ToggleEdit implements Action {\n    readonly type = TOGGLE_EDIT;\n    constructor(public team: Partial<Team>) {}\n}\n\nexport class Reset implements Action {\n    readonly type = RESET;\n}\n\nexport class AddDriver implements Action {\n    readonly type = ADD_DRIVER;\n    constructor(public payload: any) {}\n}\n\nexport class RemoveDriver implements Action {\n    readonly type = REMOVE_DRIVER;\n    constructor(public payload: any) {}\n}\n\nexport class AddDriverSuccess implements Action {\n    readonly type = ADD_DRIVER_SUCCESS;\n    constructor(public payload: any) {}\n}\n\nexport class RemoveDriverSuccess implements Action {\n    readonly type = REMOVE_DRIVER_SUCCESS;\n    constructor(public payload: any) {}\n}\n\nexport type All\n    = Edit\n    | Fetch\n    | Add\n    | ToggleEdit\n    | Delete\n    | DeleteSucces\n    | DeleteFail\n    | Reset;\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TeamsComponent } from './components/teams.component';\nimport { DriversComponent } from './components/drivers.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/a/teams', pathMatch: 'full'},\n  { path: 'a/drivers', component: DriversComponent },\n  { path: 'a/teams', component: TeamsComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align: center\\\">\\n  <button mat-button routerLink=\\\"/a/drivers\\\">Drivers</button> \\n  <button mat-button routerLink=\\\"/a/teams\\\">Teams</button> \\n</div>\\n<router-outlet></router-outlet>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ngrx';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { DriversComponent } from './components/drivers.component';\nimport { StoreModule } from '@ngrx/store';\nimport { driversReducer } from './reducers/drivers.reducer';\nimport { teamsReducer } from './reducers/teams.reducers';\nimport { TeamsComponent } from './components/teams.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { EditableCellPipe } from './pipes/editable-cell.pipe';\nimport { EffectsModule } from '@ngrx/effects';\nimport { DriversEffects } from './effects/drivers.effects';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { HttpClientModule } from '@angular/common/http';\nimport { TeamsEffects } from './effects/teams.effects';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DriversComponent,\n    TeamsComponent,\n    EditableCellPipe,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    StoreModule.forRoot({\n      drivers: driversReducer,\n      teams: teamsReducer\n    }),\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatInputModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatChipsModule,\n    MatTableModule,\n    MatGridListModule,\n    HttpClientModule,\n    MatProgressSpinnerModule,\n    EffectsModule.forRoot([DriversEffects, TeamsEffects]),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, ElementRef } from '@angular/core';\nimport { from, Observable, of, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport * as DriversActions from '../actions/drivers.actions';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { Driver } from '../models/driver.model';\nimport * as fromDrivers from '../reducers/drivers.reducer';\n\n@Component({\n  selector: 'app-drivers',\n  template: `\n    <div style=\"text-align: center\">\n      <button mat-button (click)=\"refresh()\">Refresh</button>\n    </div>\n    <table mat-table [dataSource]=\"drivers$ | async\" class=\"mat-elevation-z8\" style=\"margin: auto; width: 60%\">\n    <!--- Note that these columns can be defined in any order.\n          The actual rendered columns are set as a property on the row definition\" -->\n  \n    <!-- Actions Column -->\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let driver\">\n        <div *ngIf=\"driver.editable; else notEditable\">\n          <button [disabled]=\"driver.loading\" mat-button (click)=\"edit(driver)\" color=\"primary\">Save</button>\n          <button [disabled]=\"driver.loading\" mat-button (click)=\"cancel(driver)\" color=\"primary\">Cancel</button>\n        </div>\n        <ng-template #notEditable>\n          <button [disabled]=\"driver.loading\" mat-button (click)=\"remove(driver)\" color=\"primary\">Delete</button>\n          <button [disabled]=\"driver.loading\" mat-button (click)=\"toggleEditing(driver)\" color=\"primary\">Edit</button>\n        </ng-template>\n        <mat-spinner *ngIf=\"driver.loading\" [diameter]=\"20\"></mat-spinner>\n      </td>\n    </ng-container>\n\n    <!-- Position Column -->\n    <ng-container matColumnDef=\"position\">\n      <th mat-header-cell *matHeaderCellDef> Position </th>\n      <td mat-cell *matCellDef=\"let driver;index as i;\"> {{ i + 1}} </td>\n    </ng-container>\n  \n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let driver;\"> \n        <input *ngIf=\"driver.editable; else notEditable\" placeholder=\"name\" [disabled]=\"driver.loading\"\n         value=\"{{ driver.name }}\" (input)=\"setUpdate($event, driver, 'name')\" autocomplete=\"off\"\n         (keyup.enter)=\"edit(driver)\">\n        <ng-template #notEditable> {{ driver.name }} </ng-template>\n      </td>\n    </ng-container>\n  \n    <!-- Country Column -->\n    <ng-container matColumnDef=\"country\">\n      <th mat-header-cell *matHeaderCellDef> Country </th>\n      <td mat-cell *matCellDef=\"let driver\">\n        <input *ngIf=\"driver.editable; else notEditable\" placeholder=\"country\" [disabled]=\"driver.loading\"\n          value=\"{{ driver.country }}\" (input)=\"setUpdate($event, driver, 'country')\" autocomplete=\"off\"\n          (keyup.enter)=\"edit(driver)\">\n        <ng-template #notEditable> {{ driver.country }} </ng-template>\n      </td>\n    </ng-container>\n\n    <!-- Country Column -->\n    <ng-container matColumnDef=\"points\">\n      <th mat-header-cell *matHeaderCellDef> Points </th>\n      <td mat-cell *matCellDef=\"let driver\">\n        <input *ngIf=\"driver.editable; else notEditable\" placeholder=\"points\" [disabled]=\"driver.loading\"\n          value=\"{{ driver.points }}\" (input)=\"setUpdate($event, driver, 'points')\" autocomplete=\"off\"\n          (keyup.enter)=\"edit(driver)\" >\n        <ng-template #notEditable> {{ driver.points }} </ng-template>\n      </td>\n    </ng-container>\n\n    <!-- Team Column -->\n    <ng-container matColumnDef=\"team\">\n      <th mat-header-cell *matHeaderCellDef> Team </th>\n      <td mat-cell *matCellDef=\"let driver\">\n        <span *ngIf=\"driver.team;else na\">{{ driver.team.name }}</span> \n        <ng-template #na>N/A</ng-template>\n      </td>\n    </ng-container>\n  \n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row class=\"driver-{{row.id}}\" *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n\n    <br>\n    <div style=\"text-align: center\">\n    <form [formGroup]=\"driversForm\" (ngSubmit)=\"add()\">\n    <mat-form-field>\n      <input matInput placeholder=\"name\" formControlName=\"name\" autocomplete=\"off\">\n    </mat-form-field>\n    &nbsp;\n    <mat-form-field>\n      <input matInput placeholder=\"country\" formControlName=\"country\" autocomplete=\"off\">\n    </mat-form-field>\n    &nbsp;\n    <mat-form-field>\n      <input matInput placeholder=\"points\" formControlName=\"points\" autocomplete=\"off\">\n    </mat-form-field>\n    <button mat-button color=\"primary\" type=\"submit\">Add new driver</button>\n    </form>\n  </div>\n  `,\n  styles: []\n})\nexport class DriversComponent implements OnInit {\n\n  drivers$: Observable<Driver[]>;\n  driversForm: FormGroup;\n  displayedColumns: string[] = ['actions', 'position', 'name', 'country', 'points', 'team'];\n\n  constructor(private store: Store<fromDrivers.State>, private fb: FormBuilder, private elRef: ElementRef) { }\n\n  ngOnInit() {\n    this.refresh();\n    this.drivers$ = this.store.select(fromDrivers.selectAll);\n    this.driversForm = this.fb.group({\n      name: 'New Driver',\n      country: 'srb',\n      points: '9001',\n    });\n  }\n\n  toggleEditing(driver: Driver) {\n    this.store.dispatch(new DriversActions.ToggleEdit({ id: driver.id, editable: driver.editable}));\n  }\n\n  edit(driver) {\n    const upd = Object.assign({}, driver.update);\n    delete driver.update; \n    upd.id = driver.id;\n    this.store.dispatch(new DriversActions.Edit(upd));\n  }\n  \n  add() {\n    const driver = this.driversForm.value;\n    this.store.dispatch(new DriversActions.Add(driver));\n  }\n\n  remove(driver: Driver) {\n    this.store.dispatch(new DriversActions.Delete(driver.id));\n  }\n\n  cancel(driver) {\n    this.toggleEditing(driver);\n  }\n  \n  refresh() {\n    this.store.dispatch(new DriversActions.Reset());\n  }\n\n  setUpdate($event, driver, prop) {\n    if (!driver.update) {\n      driver.update = {};\n    }\n\n    driver.update[prop] = $event.target.value;\n  }\n\n}\n\n","import { Component, OnInit, ElementRef } from '@angular/core';\nimport { from, Observable, of, Subject } from 'rxjs';\nimport { map, switchMap, filter, toArray, tap } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport * as teamsActions from '../actions/teams.actions';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { Team } from '../models/team.model';\nimport * as fromteams from '../reducers/teams.reducers';\nimport * as fromDrivers from '../reducers/drivers.reducer';\nimport { Driver } from '../models/driver.model';\n\n@Component({\n  selector: 'app-teams',\n  template: `\n    <div style=\"text-align: center\">\n      <button mat-button (click)=\"refresh()\">Refresh</button>\n    </div>\n    <table mat-table [dataSource]=\"teams$ | async\" class=\"mat-elevation-z8\" style=\"margin: auto; width: 60%\">\n    <!--- Note that these columns can be defined in any order.\n          The actual rendered columns are set as a property on the row definition\" -->\n  \n    <!-- Actions Column -->\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let team\">\n        <div *ngIf=\"team.editable; else notEditable\">\n          <button [disabled]=\"team.loading\" mat-button (click)=\"edit(team)\" color=\"primary\">Save</button>\n          <button [disabled]=\"team.loading\" mat-button (click)=\"cancel(team)\" color=\"primary\">Cancel</button>\n        </div>\n        <ng-template #notEditable>\n          <button [disabled]=\"team.loading\" mat-button (click)=\"remove(team)\" color=\"primary\">Delete</button>\n          <button [disabled]=\"team.loading\" mat-button (click)=\"toggleEditing(team)\" color=\"primary\">Edit</button>\n        </ng-template>\n        <mat-spinner *ngIf=\"team.loading\" [diameter]=\"20\"></mat-spinner>\n      </td>\n    </ng-container>\n\n    <!-- Position Column -->\n    <ng-container matColumnDef=\"position\">\n      <th mat-header-cell *matHeaderCellDef> Position </th>\n      <td mat-cell *matCellDef=\"let team;index as i;\"> {{ i + 1}} </td>\n    </ng-container>\n  \n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let team;\"> \n        <input *ngIf=\"team.editable; else notEditable\" placeholder=\"name\" [disabled]=\"team.loading\"\n         value=\"{{ team.name }}\" (input)=\"setUpdate($event, team, 'name')\" autocomplete=\"off\"\n         (keyup.enter)=\"edit(team)\">\n        <ng-template #notEditable> {{ team.name }} </ng-template>\n      </td>\n    </ng-container>\n  \n    <!-- Country Column -->\n    <ng-container matColumnDef=\"country\">\n      <th mat-header-cell *matHeaderCellDef> Country </th>\n      <td mat-cell *matCellDef=\"let team\">\n        <input *ngIf=\"team.editable; else notEditable\" placeholder=\"country\" [disabled]=\"team.loading\"\n          value=\"{{ team.country }}\" (input)=\"setUpdate($event, team, 'country')\" autocomplete=\"off\"\n          (keyup.enter)=\"edit(team)\">\n        <ng-template #notEditable> {{ team.country }} </ng-template>\n      </td>\n    </ng-container>\n\n        <!-- Country Column -->\n    <ng-container matColumnDef=\"podiums\">\n      <th mat-header-cell *matHeaderCellDef> Podium finishes </th>\n      <td mat-cell *matCellDef=\"let team\">\n        <input *ngIf=\"team.editable; else notEditable\" placeholder=\"country\" [disabled]=\"team.loading\"\n          value=\"{{ team.podiumFinishes }}\" (input)=\"setUpdate($event, team, 'country')\" autocomplete=\"off\"\n          (keyup.enter)=\"edit(team)\">\n        <ng-template #notEditable> {{ team.podiumFinishes }} </ng-template>\n      </td>\n    </ng-container>\n\n        <!-- Country Column -->\n    <ng-container matColumnDef=\"titles\">\n      <th mat-header-cell *matHeaderCellDef> Championship titles </th>\n      <td mat-cell *matCellDef=\"let team\">\n        <input *ngIf=\"team.editable; else notEditable\" placeholder=\"country\" [disabled]=\"team.loading\"\n          value=\"{{ team.country }}\" (input)=\"setUpdate($event, team, 'country')\" autocomplete=\"off\"\n          (keyup.enter)=\"edit(team)\">\n        <ng-template #notEditable> {{ team.championshipTitles }} </ng-template>\n      </td>\n    </ng-container>\n  \n    <ng-container matColumnDef=\"drivers\">\n      <th mat-header-cell *matHeaderCellDef> Drivers </th>\n      <td mat-cell *matCellDef=\"let team\">\n          <div *ngFor=\"let driver of team.drivers\">\n              <span style=\"min-width: 150px; float: left\">{{ driver.name }}</span>\n              <button (click)=\"removeDriver(team, driver)\">-</button>\n          </div>\n          <div *ngIf=\"!team.drivers || team.drivers.length < 2\">\n          <form #driverForm=\"ngForm\" (ngSubmit)=\"addDriver(team, driverForm.value.driver)\">\n            <span style=\"min-width: 150px; float: left\">\n            <select name=\"driver\" ngModel>\n            <option></option>\n            <option *ngFor=\"let driver of teamlessDrivers$ | async\"\n                [value]=\"driver | json\">\n                {{driver.name}}\n              </option> \n              </select>\n              </span>\n            <button type=\"submit\">+</button>\n           </form> \n          </div>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row class=\"team-{{row.id}}\" *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n\n    <br>\n    <div style=\"text-align: center\">\n    <form [formGroup]=\"teamsForm\" (ngSubmit)=\"add()\">\n    <mat-form-field>\n      <input matInput placeholder=\"name\" formControlName=\"name\" autocomplete=\"off\">\n    </mat-form-field>\n    &nbsp;\n    <mat-form-field>\n      <input matInput placeholder=\"country\" formControlName=\"country\" autocomplete=\"off\">\n    </mat-form-field>\n    &nbsp;\n    <mat-form-field>\n      <input matInput placeholder=\"titles\" formControlName=\"championshipTitles\" autocomplete=\"off\">\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput placeholder=\"podium finishes\" formControlName=\"podiumFinishes\" autocomplete=\"off\">\n    </mat-form-field>\n    <button mat-button color=\"primary\" type=\"submit\">Add new team</button>\n    </form>\n  </div>\n  `,\n  styles: []\n})\nexport class TeamsComponent implements OnInit {\n\n  teams$: Observable<Team[]>;\n  teamlessDrivers$: Observable<Driver[]>;\n  teamsForm: FormGroup;\n  displayedColumns: string[] = ['actions', 'position', 'name', 'country', 'podiums', 'titles', 'drivers'];\n\n  constructor(private store: Store<fromteams.State>, private fb: FormBuilder, private elRef: ElementRef) { }\n\n  ngOnInit() {\n    this.refresh();\n    this.teams$ = this.store.select(fromteams.selectAll);\n    this.teamlessDrivers$ = this.store.select(fromDrivers.selectAll)\n      .pipe(\n        map(driver => driver.filter(d => !d.team))\n        );\n    this.teamsForm = this.fb.group({\n      name: 'New Team',\n      country: 'srb',\n      championshipTitles: '9001',\n      podiumFinishes: '10000'\n    });\n  }\n\n  toggleEditing(team: Team) {\n    this.store.dispatch(new teamsActions.ToggleEdit({ id: team.id, editable: team.editable}));\n  }\n\n  edit(team) {\n    const upd = Object.assign({}, team.update);\n    delete team.update; \n    upd.id = team.id;\n    this.store.dispatch(new teamsActions.Edit(upd));\n  }\n  \n  add() {\n    const team = this.teamsForm.value;\n    team.drivers = [];\n    this.store.dispatch(new teamsActions.Add(team));\n  }\n\n  remove(team: Team) {\n    this.store.dispatch(new teamsActions.Delete(team.id));\n  }\n\n  cancel(team) {\n    this.toggleEditing(team);\n  }\n  \n  refresh() {\n    this.store.dispatch(new teamsActions.Reset());\n  }\n\n  setUpdate($event, team, prop) {\n    if (!team.update) {\n      team.update = {};\n    }\n\n    team.update[prop] = $event.target.value;\n  }\n\n  addDriver(team, driver) {\n    if(!driver) return;\n    console.log(team);\n    console.log(JSON.parse(driver));\n    this.store.dispatch(new teamsActions.AddDriver({ team, driver: JSON.parse(driver)}));\n  }\n\n  removeDriver(team, driver) {\n    console.log(team);\n    console.log(driver);\n    this.store.dispatch(new teamsActions.RemoveDriver({ team, driver }));\n  }\n\n}\n\n","import { Injectable } from '@angular/core';\nimport { Actions, ofType, Effect } from '@ngrx/effects';\nimport * as driversActions from '../actions/drivers.actions';\nimport { tap, exhaustMap, mergeMap, concatMap, switchMap, map, delay, catchError } from 'rxjs/operators';\nimport { from, of } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { DriversService } from '../services/drivers.service';\n\n@Injectable()\nexport class DriversEffects {\n\n    @Effect()\n    delete$ = this.actions.pipe(\n        ofType<Action>(driversActions.DELETE),\n        map((action: driversActions.Delete) => action.id),\n        mergeMap(id => this.service.delete(id).pipe(\n            map(() => new driversActions.DeleteSucces(id)),\n            catchError(() => of(new driversActions.DeleteFail(id)))\n        )),\n    )\n\n    @Effect()\n    edit$ = this.actions.pipe(\n        ofType<Action>(driversActions.EDIT),\n        map((action: driversActions.Edit) => action.driver),\n        mergeMap(driver => this.service.edit(driver.id, driver).pipe(\n            map(() => new driversActions.EditSuccess(driver)),\n            catchError(() => of(new driversActions.DeleteFail(driver.id)))\n        )),\n    )\n\n    @Effect()\n    add$ = this.actions.pipe(\n        ofType<Action>(driversActions.ADD),\n        map((action: driversActions.Add) => action.driver),\n        mergeMap(driver => this.service.add(driver).pipe(\n            tap(console.log),\n            map((res) => new driversActions.AddSuccess({ ...driver, id: res.id })),\n            catchError(() => of(new driversActions.DeleteFail(driver.id)))\n        )),\n    )\n\n    @Effect()\n    getData$ = this.service.get().pipe(\n        tap(console.log),\n        map(drivers => new driversActions.FetchSuccess(drivers))\n    );\n\n    @Effect()\n    refresh$ = this.actions.pipe(\n        ofType<Action>(driversActions.RESET),\n        mergeMap(drivers => this.getData$)\n    )\n\n    constructor(\n        private actions: Actions,\n        private service: DriversService\n        ) {}\n\n}","import { Injectable } from '@angular/core';\nimport { Actions, ofType, Effect } from '@ngrx/effects';\nimport * as teamsActions from '../actions/teams.actions';\nimport * as driversActions from '../actions/drivers.actions';\nimport { tap, exhaustMap, mergeMap, concatMap, switchMap, map, delay, catchError } from 'rxjs/operators';\nimport { from, of } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { TeamsService } from '../services/teams.service';\nimport { Driver } from '../models/driver.model';\n\n@Injectable()\nexport class TeamsEffects {\n\n    @Effect()\n    delete$ = this.actions.pipe(\n        ofType<Action>(teamsActions.DELETE),\n        map((action: teamsActions.Delete) => action.id),\n        mergeMap(id => this.service.delete(id).pipe(\n            map(() => new teamsActions.DeleteSucces(id)),\n            catchError(() => of(new teamsActions.DeleteFail(id)))\n        )),\n    )\n\n    @Effect()\n    edit$ = this.actions.pipe(\n        ofType<Action>(teamsActions.EDIT),\n        map((action: teamsActions.Edit) => action.team),\n        mergeMap(team => this.service.edit(team.id, team).pipe(\n            map(() => new teamsActions.EditSuccess(team)),\n            catchError(() => of(new teamsActions.DeleteFail(team.id)))\n        )),\n    )\n\n    @Effect()\n    add$ = this.actions.pipe(\n        ofType<Action>(teamsActions.ADD),\n        map((action: teamsActions.Add) => action.team),\n        mergeMap(team => this.service.add(team).pipe(\n            tap(console.log),\n            map((res) => new teamsActions.AddSuccess({ ...team, id: res.id })),\n            catchError(() => of(new teamsActions.DeleteFail(team.id)))\n        )),\n    )\n\n    @Effect()\n    getData$ = this.service.get().pipe(\n        tap(console.log),\n        map(teams => new teamsActions.FetchSuccess(teams))\n    );\n\n\n    @Effect()\n    addDriver$ = this.actions.pipe(\n        ofType<Action>(teamsActions.ADD_DRIVER),\n        map((action: teamsActions.AddDriver) =>  action.payload),\n        exhaustMap((payload: any) => this.service.addDriver(payload.team.id, payload.driver.id).pipe(\n            map(() => new teamsActions.AddDriverSuccess(payload)),\n            map(() => new driversActions.EditSuccess({ id: payload.driver.id, team: { ...payload.team, drivers: null} }) )\n        )\n    ));\n\n    @Effect()\n    removeDriver$ = this.actions.pipe(\n        ofType<Action>(teamsActions.REMOVE_DRIVER),\n        map((action: teamsActions.RemoveDriver) =>  action.payload),\n        exhaustMap((payload: any) => this.service.removeDriver(payload.team.id, payload.driver.id).pipe(\n            map(() => new teamsActions.RemoveDriverSuccess(payload)),\n            map(() => new driversActions.EditSuccess({ id: payload.driver.id, team: null}))\n        )\n\n        ),\n        tap(console.log)\n    );\n\n    @Effect()\n    refresh$ = this.actions.pipe(\n        ofType<Action>(teamsActions.RESET),\n        mergeMap(teams => this.getData$)\n    )\n\n    constructor(\n        private actions: Actions,\n        private service: TeamsService\n        ) {}\n\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'editableCell'\n})\nexport class EditableCellPipe implements PipeTransform {\n\n  transform(rowId: number, idList: number[]): any {\n    console.log(idList);\n    return true;\n  }\n\n}\n","import { Action, createFeatureSelector, createSelector } from '@ngrx/store';\nimport { Driver } from '../models/driver.model';\nimport * as DriversActions from '../actions/drivers.actions';\nimport { Team } from '../models/team.model';\nimport { EntityState, createEntityAdapter, Update } from '@ngrx/entity';\n\nfunction newDriver(id: number, name: string, country: string, points: number, team?: Team): Driver {\n    return { id, name, country, points, team };\n}\n\nexport const adapter = createEntityAdapter<Driver>();\nexport interface State extends EntityState<Driver> {}\nexport const initialState: State = adapter.getInitialState();\n\nexport function driversReducer(state = initialState, action) {\n    switch (action.type) {\n\n        case DriversActions.FETCH_SUCCESS:\n            return adapter.addAll(action.drivers, state);\n\n        case DriversActions.EDIT || DriversActions.ADD: \n            return adapter.updateOne({\n                id: action.driver.id,\n                changes: { loading: true }\n            }, state);  \n\n        case DriversActions.ADD_SUCCESS:\n            return adapter.addOne(action.driver, state);\n        \n        case DriversActions.EDIT_SUCCESS: \n            return adapter.updateOne({\n                id: action.driver.id,\n                changes: { ...action.driver,  editable: false, loading: false }\n            }, state);\n\n        case DriversActions.TOGGLE_EDIT:\n            return adapter.updateOne({\n                id: action.driver.id,\n                changes: { editable: !action.driver.editable }\n            }, state);\n\n        case DriversActions.DELETE:\n            return adapter.updateOne({\n                id: action.id,\n                changes: { loading: true }\n            }, state);\n\n        case DriversActions.DELETE_SUCCESS:\n            return adapter.removeOne(action.id, state);\n\n        case DriversActions.DELETE_FAIL:\n            return adapter.updateOne({\n                id: action.id,\n                changes: { loading: true }\n            }, state);\n\n        case DriversActions.RESET:\n            return initialState;\n\n        default:\n            return state;\n    }\n}\n\nexport const getDriversState = createFeatureSelector<State>('drivers');\nexport const {\n    selectIds,\n    selectEntities,\n    selectTotal,\n    selectAll\n} = adapter.getSelectors(getDriversState);","import { Action, createFeatureSelector } from '@ngrx/store';\nimport * as TeamsActions from '../actions/teams.actions';\nimport { Team } from '../models/team.model';\nimport { EntityState, createEntityAdapter, Update } from '@ngrx/entity';\n\nexport const adapter = createEntityAdapter<Team>();\nexport interface State extends EntityState<Team> {}\nexport const initialState: State = adapter.getInitialState();\n\nexport function teamsReducer(state = initialState, action) {\n    switch (action.type) {\n\n        case TeamsActions.FETCH_SUCCESS: \n            return adapter.addAll(action.teams, state);\n\n        case TeamsActions.EDIT || TeamsActions.ADD: \n            return adapter.updateOne({\n                id: action.team.id,\n                changes: { loading: true }\n            }, state);  \n\n        case TeamsActions.ADD_SUCCESS:\n            return adapter.addOne(action.team, state);\n        \n        case TeamsActions.EDIT_SUCCESS: \n            return adapter.updateOne({\n                id: action.team.id,\n                changes: { ...action.team,  editable: false, loading: false }\n            }, state);\n\n        case TeamsActions.TOGGLE_EDIT:\n            return adapter.updateOne({\n                id: action.team.id,\n                changes: { editable: !action.team.editable }\n            }, state);\n\n        case TeamsActions.DELETE:\n            return adapter.updateOne({\n                id: action.id,\n                changes: { loading: true }\n            }, state);\n\n        case TeamsActions.DELETE_SUCCESS:\n            return adapter.removeOne(action.id, state);\n\n        case TeamsActions.DELETE_FAIL:\n            return adapter.updateOne({\n                id: action.id,\n                changes: { loading: true }\n            }, state);\n\n        case TeamsActions.ADD_DRIVER_SUCCESS:\n            return adapter.updateOne({\n                id: action.payload.team.id,\n                changes: { drivers: [...action.payload.team.drivers, action.payload.driver ] }\n            }, state);\n\n        case TeamsActions.REMOVE_DRIVER_SUCCESS:\n            return adapter.updateOne({\n                id: action.payload.team.id,\n                changes: { drivers: [...action.payload.team.drivers.filter(d => d.id !== action.payload.driver.id)] }\n            }, state);\n\n        case TeamsActions.RESET:\n            return initialState;\n\n        default:\n            return state;\n    }\n}\n\nexport const getTeamsState = createFeatureSelector<State>('teams');\nexport const {\n    selectIds,\n    selectEntities,\n    selectTotal,\n    selectAll\n} = adapter.getSelectors(getTeamsState);\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DriversService {\n  \n  private url = '/'; \n  \n  constructor(private http: HttpClient) { \n  }\n\n  public get() {\n    return this.http.get(this.url + 'drivers');\n  }\n\n  public add(driver) {\n    return this.http.post(this.url + 'driver/add', driver);\n  }\n\n  public edit(id, data) {\n    return this.http.put(this.url + `driver/update/${id}`, data);\n  }\n\n  public delete(id) {\n    return this.http.delete(this.url + `driver/delete/${id}`);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamsService {\n\n  private url = '/'; \n\n  constructor(private http: HttpClient) { }\n\n  public get() {\n    return this.http.get(this.url + 'teams');\n  }\n\n  public add(team) {\n    return this.http.post(this.url + 'team/add', team);\n  }\n\n  public edit(id, data) {\n    return this.http.put(this.url + `team/update/${id}`, data);\n  }\n\n  public delete(id) {\n    return this.http.delete(this.url + `team/delete/${id}`);\n  }\n\n  public addDriver(teamId, driverId) {\n    return this.http.patch(this.url + `team/add-driver/${teamId}/${driverId}`, null);\n  }\n\n  public removeDriver(teamId, driverId) {\n    return this.http.patch(this.url + `team/remove-driver/${teamId}/${driverId}`, null);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  url: 'http://localhost:4000/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}